buildscript {
	ext {
		groupId = 'xyz.dgz48'
		artifactId = 'redman'
		implementationVersion = '1.0.0.SNAPSHOT'
		defaultEncoding  = 'UTF-8'
		compatibility    = 1.8
		springBootVersion = '2.0.0.RELEASE'
	}
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
//apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'jdepend'

group = groupId
version = implementationVersion
sourceCompatibility = compatibility
targetCompatibility = compatibility

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}

dependencyManagement {
	imports {
		mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
	}
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	//compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-mail')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	compile('nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:2.3.0')
	compile('com.github.mxab.thymeleaf.extras:thymeleaf-extras-data-attribute:2.0.1')
	//compile('org.flywaydb:flyway-core')
	runtime('org.springframework.boot:spring-boot-devtools')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.security:spring-security-test')
}

compileJava {
	options.encoding = defaultEncoding
}

compileTestJava {
	options.encoding = defaultEncoding
}

bootJar {
	mainClassName = 'xyz.dgz48.redman.Application'
	manifest {
		attributes 'Start-Class': 'xyz.dgz48.redman.Application'
		attributes 'Implementation-Title': artifactId
		attributes 'Implementation-Version': implementationVersion
		attributes 'Implementation-Vendor': groupId
		attributes 'Implementation-Vendor-Id': groupId
		attributes 'Class-Path': configurations.compile.collect { it.getName() }.join(' ')
	}
	launchScript()
}

jacocoTestReport {
	reports {
		xml.enabled false
		csv.enabled false
		html.enabled true
		//html.destination file("${buildDir}/jacocoHtml")
	}
}
check.dependsOn jacocoTestReport

jacocoTestCoverageVerification {
	violationRules {
		rule {
			element = 'CLASS'
			excludes = ['**.Application']
			limit {
				counter = 'INSTRUCTION'
				minimum = 1.0
			}
		}
	}
}
check.dependsOn jacocoTestCoverageVerification

checkstyle {
	configFile = file("${project.rootDir}/checkstyle/checkstyle.xml")
	ignoreFailures = false // エラー、警告でビルド停止
	maxErrors = 0 // エラーを１つも許さない
	maxWarnings = 0 // 警告を１つも許さない
	showViolations = true
}

tasks.withType(Checkstyle) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}

findbugs {
	effort = 'max' // どのぐらい頑張るか[min|default|max]
	ignoreFailures = false // エラー、警告でビルド停止
	reportLevel = 'low' // どのぐらい細かいやつを問題視するか[low|medium|high]
	showProgress = false
}

tasks.withType(FindBugs) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}

pmd {
	consoleOutput = false
	ignoreFailures = false
	rulePriority = 5
	ruleSetFiles = files("${project.rootDir}/pmd/java.xml")
	ruleSets = []  // To apply only the custom rules
}

tasks.withType(Pmd) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}

jdepend {
	ignoreFailures = false // エラー、警告でビルド停止
}

javadoc {
	options.encoding = defaultEncoding
	options.charSet = defaultEncoding
	options.locale = 'ja'
}
